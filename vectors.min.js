class Vector{constructor(t=0,r=0,i=0){return this.x=t,this.y=r,this.z=i,this}add(t){if(!(t instanceof Vector))throw new TypeError("The argument is not a vector");return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}sub(t){if(!(t instanceof Vector))throw new TypeError("The argument is not a vector");return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subtract(t){return this.sub(t)}mult(t){if(t instanceof Vector)return this.x*=t.x,this.y*=t.y,this.z*=t.z,this;if("number"==typeof t)return this.x*=t,this.y*=t,this.z*=t,this;throw new TypeError("The argument is not a vector or a number")}multiply(t){return this.mult(t)}divide(t){if(t instanceof Vector)return this.x/=t.x,this.y/=t.y,this.z/=t.z,this;if("number"==typeof t)return this.x/=t,this.y/=t,this.z/=t,this;throw new TypeError("The argument is not a vector or a number")}div(t){return this.divide(t)}min(){return Math.min(this.x,this.y,this.z)}max(){return Math.max(this.x,this.y,this.z)}dot(t){if(!(t instanceof Vector))throw new TypeError("The argument is not a vector");return this.x*t.x+this.y*t.y+this.z*t.z}cross(t){if(!(t instanceof Vector))throw new TypeError("The argument is not a vector");const r=this.y*t.z-this.z*t.y,i=this.z*t.x-this.x*t.z,e=this.x*t.y-this.y*t.x;return this.x=r,this.y=i,this.z=e,this}distSq(t){if(!(t instanceof Vector))throw new TypeError("The argument is not a vector");return Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2)+Math.pow(this.z-t.z,2)}dist(t){if(!(t instanceof Vector))throw new TypeError("The argument is not a vector");return Math.sqrt(this.distSq(t))}angleBetween(t){if(!(t instanceof Vector))return Math.acos(this.dot(this,t)/(this.mag()*t.mag()))}equals(t){if(!(t instanceof Vector))throw new TypeError("The argument is not a vector");return this.x==t.x&&this.y==t.y&&this.z==t.z}copy(){return new Vector(this.x,this.y,this.z)}limit(t){if("number"!=typeof t)throw new TypeError("The argument is not a number");let r=this.mag();if(r>t)return this.multiply(t/r),this}setMag(t){if("number"!=typeof t)throw new TypeError("The argument is not a number");let r=this.mag();return this.multiply(t/r),this}rotate(t){if("number"!=typeof t)throw new TypeError("The argument is not a number");let r=Math.cos(t)*this.x-Math.sin(t)*this.y,i=Math.sin(t)*this.x+Math.cos(t)*this.y;return this.x=r,this.y=i,this}normalize(){return this.divide(this.mag()),this}invert(t,r,i){return!0===t&&(this.x*=-1),!0===r&&(this.y*=-1),!0===i&&(this.z*=-1),void 0===t&&void 0===r&&void 0===i&&(this.x*=-1,this.y*=-1,this.z*=-1),this}invertX(){return this.invert(!0,!1,!1),this}invertY(){return this.invert(!1,!0,!1),this}invertZ(){return this.invert(!1,!1,!0),this}mag(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}magSq(){return this.x*this.x+this.y*this.y+this.z*this.z}heading2D(){if(0!==this.z)throw new Error("The vector is not 2D");return Math.atan2(this.y,this.x)}toString(){return`Vector(x: ${this.x}, y: ${this.y}, z: ${this.z})`}static fromAngle2D(t=0){return new Vector(Math.cos(t),Math.sin(t),0)}static fromAngle3D(t=0,r=0){return new Vector(Math.cos(t)*Math.cos(r),Math.sin(r),Math.sin(t)*Math.cos(r))}static random2D(){let t=2*Math.random()*Math.PI;return Vector.fromAngle2D(t)}static random3D(){let t=2*Math.random()*Math.PI,r=2*Math.random()*Math.PI;return Vector.fromAngle3D(t,r)}static fromArray(t){return new Vector(t[0],t[1],t[2])}static fromObject(t){return new Vector(t.x,t.y,t.z)}}